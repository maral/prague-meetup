// this whole file was generated by ChatGPT-4

function boolArrayToBinaryString(boolArray: boolean[]): string {
  let binaryStr = "";
  boolArray.forEach((bool, index) => {
    binaryStr += bool ? "1" : "0";
  });
  return binaryStr;
}

function binaryStringToUint8Array(binaryStr: string): Uint8Array {
  const byteCount = Math.ceil(binaryStr.length / 8);
  const byteArray = new Uint8Array(byteCount);

  for (let i = 0; i < byteCount; i++) {
    byteArray[i] = parseInt(binaryStr.substr(i * 8, 8), 2);
  }

  return byteArray;
}

function uint8ArrayToBase64(uint8Array: Uint8Array): string {
  let base64 = "";
  const characters =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  for (let i = 0; i < uint8Array.length; i += 3) {
    const a = uint8Array[i];
    const b = uint8Array[i + 1];
    const c = uint8Array[i + 2];

    const index1 = a >> 2;
    const index2 = ((a & 0x03) << 4) | (b >> 4);
    const index3 = ((b & 0x0f) << 2) | (c >> 6);
    const index4 = c & 0x3f;

    base64 +=
      characters[index1] +
      characters[index2] +
      characters[index3] +
      characters[index4];
  }

  return base64;
}

function base64ToUrlSafe(base64: string): string {
  return base64.replace("+", "-").replace("/", "_").replace(/=+$/, "");
}

export function encodeBooleans(boolArray: boolean[]): string {
  const binaryStr = boolArrayToBinaryString(boolArray);
  const uint8Array = binaryStringToUint8Array(binaryStr);
  const base64 = uint8ArrayToBase64(uint8Array);
  const urlSafeBase64 = base64ToUrlSafe(base64);
  return urlSafeBase64;
}

// Usage example
// const boolArray = new Array(57).fill(false); // Replace with your actual boolean values
// const encodedBooleans = encodeBooleans(boolArray);
// console.log(encodedBooleans);

function urlSafeToBase64(urlSafeBase64: string): string {
  const paddingLength = 4 - (urlSafeBase64.length % 4);
  const padding = paddingLength < 4 ? "=".repeat(paddingLength) : "";
  return urlSafeBase64.replace("-", "+").replace("_", "/") + padding;
}

function base64ToUint8Array(base64: string): Uint8Array {
  const characters =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  const rawData = atob(base64);
  const uint8Array = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; i++) {
    uint8Array[i] = rawData.charCodeAt(i);
  }

  return uint8Array;
}

function uint8ArrayToBinaryString(uint8Array: Uint8Array): string {
  let binaryStr = "";

  for (let i = 0; i < uint8Array.length; i++) {
    binaryStr += uint8Array[i].toString(2).padStart(8, "0");
  }

  return binaryStr;
}

function binaryStringToBoolArray(binaryStr: string, length: number): boolean[] {
  const boolArray = [];
  for (let i = 0; i < length; i++) {
    boolArray.push(binaryStr.charAt(i) === "1");
  }
  return boolArray;
}

export function decodeBooleans(
  encodedBooleans: string,
  length: number
): boolean[] {
  const base64 = urlSafeToBase64(encodedBooleans);
  const uint8Array = base64ToUint8Array(base64);
  const binaryStr = uint8ArrayToBinaryString(uint8Array);
  const boolArray = binaryStringToBoolArray(binaryStr, length);
  return boolArray;
}

// Usage example
// const encodedBooleans = '...'; // Replace with your actual encoded string
// const decodedBooleans = decodeBooleans(encodedBooleans, 57);
// console.log(decodedBooleans);
